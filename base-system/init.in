#!/bin/sh

PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH
do_upgrade()
{
  echo "Starting upgrade..."
  ISO_PATH=$(find /.root/updates -name "aryalinux*iso")
  ISO_MOUNTPOINT="/mnt/mountpoint"
  mkdir -p $ISO_MOUNTPOINT
  mount -ro -o loop $ISO_PATH $ISO_MOUNTPOINT
  touch /.root/upgrade-in-progress
  unsquashfs -f -d /.root $ISO_PATH
  rm /.root/upgrade-in-progress
  umount $ISO_MOUNTPOINT
  rm ISO_PATH
  echo "Upgrade complete."
}
apply_updates()
{
  echo "Applying updates. Please wait..."
  for d in /.root/updates; do
    if [ -d $d ]; then
      if [ -f /.root/updates/$d/info ]; then
        update_info=$(cat /.root/updates/$d/info)
      fi
      echo "Processing update $update_info..."
      if [ -f /.root/updates/$d/update.tar.xz ]; then
        if [ -f /.root/updates/$d/layer ]; then
          layer=$(cat /.root/updates/$d/layer)
        else
          layer="base"
        fi
        if [ "x$layer" == "x" ] || [ "x$layer" == "xbase" ]; then
          tar xf /.root/updates/$d/update.tar.xz -C /.root
          rm -r /.root/updates/$d
        fi
      fi
    fi
  done
}
problem()
{
   printf "Encountered a problem!\n\nDropping you to a shell.\n\n"
   sh
}
no_device()
{
   printf "The device %s, which is supposed to contain the\n" $1
   printf "root file system, does not exist.\n"
   printf "Please fix this problem and exit this shell.\n\n"
}
no_mount()
{
   printf "Could not mount device %s\n" $1
   printf "Sleeping forever. Please reboot and fix the kernel command line.\n\n"
   printf "Maybe the device is formatted with an unsupported file system?\n\n"
   printf "Or maybe filesystem type autodetection went wrong, in which case\n"
   printf "you should add the rootfstype=... parameter to the kernel command line.\n\n"
   printf "Available partitions:\n"
}
do_mount_root()
{
   mkdir /.root
   [ -n "$rootflags" ] && rootflags="$rootflags,"
   rootflags="$rootflags$ro"
   case "$root" in
      /dev/* ) device=$root ;;
      UUID=* ) eval $root; device="/dev/disk/by-uuid/$UUID"  ;;
      LABEL=*) eval $root; device="/dev/disk/by-label/$LABEL" ;;
      ""     ) echo "No root device specified." ; problem    ;;
   esac
   while [ ! -b "$device" ] ; do
       no_device $device
       problem
   done
   #if ! mount -n -t "$rootfstype" -o "$rootflags" "$device" /.root ; then
   if ! mount "$device" /.root ; then
       no_mount $device
       cat /proc/partitions
       while true ; do sleep 10000 ; done
   else
    # Check and apply any pending distro-update
    if [ -f /.root/upgrade-in-progress ]; then
      do_upgrade
    fi
    if [ -f /.root/updates/aryalinux*iso ]; then
      read -p "Distro update pending. Do you want to do perform the update now? (Y/n) " response
      if [ "x$response" == "xy" ] || [ "x$response" == "xY" ] || [ "x$response" == "x" ]; then
        do_upgrade
      fi
    fi
    # Check and apply any pending update for a given layer
    apply_updates
	# Now that we mounted root, lets overlay
	BASE="/.root"
	XSERVER_DIR="$BASE/opt/x-server"
	DE_DIR="$BASE/opt/desktop-environment"
	UPPER_DIR="$BASE/opt/user-data"
	mkdir -pv $UPPER_DIR
	if [ -d $XSERVER_DIR ]; then
		if [ -d $DE_DIR ]; then
			mount -t overlay -oupperdir=$UPPER_DIR,lowerdir=$DE_DIR:$XSERVER_DIR:$BASE,workdir=$BASE/tmp overlay $BASE
		else
			mount -t overlay -oupperdir=$UPPER_DIR,lowerdir=$XSERVER_DIR:$BASE,workdir=$BASE/tmp overlay $BASE
		fi
	fi
       echo "Successfully mounted device $root"
   fi
}
init=/sbin/init
root=
rootdelay=
rootfstype=auto
ro="ro"
rootflags=
device=
mount -n -t devtmpfs devtmpfs /dev
mount -n -t proc     proc     /proc
mount -n -t sysfs    sysfs    /sys
mount -n -t tmpfs    tmpfs    /run
read -r cmdline < /proc/cmdline
for param in $cmdline ; do
  case $param in
    init=*      ) init=${param#init=}             ;;
    root=*      ) root=${param#root=}             ;;
    rootdelay=* ) rootdelay=${param#rootdelay=}   ;;
    rootfstype=*) rootfstype=${param#rootfstype=} ;;
    rootflags=* ) rootflags=${param#rootflags=}   ;;
    ro          ) ro="ro"                         ;;
    rw          ) ro="rw"                         ;;
  esac
done
# udevd location depends on version
if [ -x /sbin/udevd ]; then
  UDEVD=/sbin/udevd
elif [ -x /lib/udev/udevd ]; then
  UDEVD=/lib/udev/udevd
elif [ -x /lib/systemd/systemd-udevd ]; then
  UDEVD=/lib/systemd/systemd-udevd
else
  echo "Cannot find udevd nor systemd-udevd"
  problem
fi
${UDEVD} --daemon --resolve-names=never
udevadm trigger
udevadm settle
if [ -f /etc/mdadm.conf ] ; then mdadm -As                       ; fi
if [ -x /sbin/vgchange  ] ; then /sbin/vgchange -a y > /dev/null ; fi
if [ -n "$rootdelay"    ] ; then sleep "$rootdelay"              ; fi
do_mount_root
killall -w ${UDEVD##*/}
exec switch_root /.root "$init" "$@"